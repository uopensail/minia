
// Generated from minia.g4 by ANTLR 4.13.2


#include "miniaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct MiniaLexerStaticData final {
  MiniaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MiniaLexerStaticData(const MiniaLexerStaticData&) = delete;
  MiniaLexerStaticData(MiniaLexerStaticData&&) = delete;
  MiniaLexerStaticData& operator=(const MiniaLexerStaticData&) = delete;
  MiniaLexerStaticData& operator=(MiniaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag minialexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<MiniaLexerStaticData> minialexerLexerStaticData = nullptr;

void minialexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (minialexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(minialexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MiniaLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T_AND", "T_OR", "T_NOT", "T_TRUE", "T_FALSE", "T_EQ", 
      "T_NEQ", "T_GT", "T_GTE", "T_LT", "T_LTE", "T_ADD", "T_SUB", "T_MUL", 
      "T_DIV", "T_MOD", "COMMA", "SEMI", "T_EQUAL", "QUOTA", "STRING_LIST", 
      "INTEGER_LIST", "DECIMAL_LIST", "IDENTIFIER", "INTEGER", "DECIMAL", 
      "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "'&'", "'|'", "'!'", "'true'", "'false'", "'=='", 
      "'!='", "'>'", "'>='", "'<'", "'<='", "'+'", "'-'", "'*'", "'/'", 
      "'%'", "','", "';'", "'='", "'\"'"
    },
    std::vector<std::string>{
      "", "", "", "T_AND", "T_OR", "T_NOT", "T_TRUE", "T_FALSE", "T_EQ", 
      "T_NEQ", "T_GT", "T_GTE", "T_LT", "T_LTE", "T_ADD", "T_SUB", "T_MUL", 
      "T_DIV", "T_MOD", "COMMA", "SEMI", "T_EQUAL", "QUOTA", "STRING_LIST", 
      "INTEGER_LIST", "DECIMAL_LIST", "IDENTIFIER", "INTEGER", "DECIMAL", 
      "STRING", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,30,313,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,
  	1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
  	1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,
  	12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,
  	19,1,20,1,20,1,21,1,21,1,22,1,22,5,22,127,8,22,10,22,12,22,130,9,22,1,
  	22,1,22,5,22,134,8,22,10,22,12,22,137,9,22,1,22,1,22,5,22,141,8,22,10,
  	22,12,22,144,9,22,1,22,5,22,147,8,22,10,22,12,22,150,9,22,3,22,152,8,
  	22,1,22,5,22,155,8,22,10,22,12,22,158,9,22,1,22,1,22,1,23,1,23,5,23,164,
  	8,23,10,23,12,23,167,9,23,1,23,1,23,5,23,171,8,23,10,23,12,23,174,9,23,
  	1,23,1,23,5,23,178,8,23,10,23,12,23,181,9,23,1,23,5,23,184,8,23,10,23,
  	12,23,187,9,23,3,23,189,8,23,1,23,5,23,192,8,23,10,23,12,23,195,9,23,
  	1,23,1,23,1,24,1,24,5,24,201,8,24,10,24,12,24,204,9,24,1,24,1,24,5,24,
  	208,8,24,10,24,12,24,211,9,24,1,24,1,24,5,24,215,8,24,10,24,12,24,218,
  	9,24,1,24,5,24,221,8,24,10,24,12,24,224,9,24,3,24,226,8,24,1,24,5,24,
  	229,8,24,10,24,12,24,232,9,24,1,24,1,24,1,25,1,25,5,25,238,8,25,10,25,
  	12,25,241,9,25,1,26,1,26,1,26,5,26,246,8,26,10,26,12,26,249,9,26,3,26,
  	251,8,26,1,27,3,27,254,8,27,1,27,5,27,257,8,27,10,27,12,27,260,9,27,1,
  	27,1,27,4,27,264,8,27,11,27,12,27,265,1,27,4,27,269,8,27,11,27,12,27,
  	270,1,27,1,27,5,27,275,8,27,10,27,12,27,278,9,27,3,27,280,8,27,1,28,1,
  	28,1,28,5,28,285,8,28,10,28,12,28,288,9,28,1,28,1,28,1,29,1,29,1,29,3,
  	29,295,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,4,
  	33,308,8,33,11,33,12,33,309,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,
  	13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	0,61,0,63,0,65,0,67,30,1,0,16,2,0,84,84,116,116,2,0,82,82,114,114,2,0,
  	85,85,117,117,2,0,69,69,101,101,2,0,70,70,102,102,2,0,65,65,97,97,2,0,
  	76,76,108,108,2,0,83,83,115,115,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
  	95,95,97,122,1,0,49,57,1,0,48,57,13,0,34,34,47,47,66,66,70,70,78,78,82,
  	82,84,84,92,92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,
  	97,102,3,0,0,31,34,34,92,92,3,0,9,10,13,13,32,32,339,0,1,1,0,0,0,0,3,
  	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
  	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
  	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
  	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
  	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
  	1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,75,1,0,
  	0,0,9,77,1,0,0,0,11,79,1,0,0,0,13,84,1,0,0,0,15,90,1,0,0,0,17,93,1,0,
  	0,0,19,96,1,0,0,0,21,98,1,0,0,0,23,101,1,0,0,0,25,103,1,0,0,0,27,106,
  	1,0,0,0,29,108,1,0,0,0,31,110,1,0,0,0,33,112,1,0,0,0,35,114,1,0,0,0,37,
  	116,1,0,0,0,39,118,1,0,0,0,41,120,1,0,0,0,43,122,1,0,0,0,45,124,1,0,0,
  	0,47,161,1,0,0,0,49,198,1,0,0,0,51,235,1,0,0,0,53,250,1,0,0,0,55,253,
  	1,0,0,0,57,281,1,0,0,0,59,291,1,0,0,0,61,296,1,0,0,0,63,302,1,0,0,0,65,
  	304,1,0,0,0,67,307,1,0,0,0,69,70,5,40,0,0,70,2,1,0,0,0,71,72,5,41,0,0,
  	72,4,1,0,0,0,73,74,5,38,0,0,74,6,1,0,0,0,75,76,5,124,0,0,76,8,1,0,0,0,
  	77,78,5,33,0,0,78,10,1,0,0,0,79,80,7,0,0,0,80,81,7,1,0,0,81,82,7,2,0,
  	0,82,83,7,3,0,0,83,12,1,0,0,0,84,85,7,4,0,0,85,86,7,5,0,0,86,87,7,6,0,
  	0,87,88,7,7,0,0,88,89,7,3,0,0,89,14,1,0,0,0,90,91,5,61,0,0,91,92,5,61,
  	0,0,92,16,1,0,0,0,93,94,5,33,0,0,94,95,5,61,0,0,95,18,1,0,0,0,96,97,5,
  	62,0,0,97,20,1,0,0,0,98,99,5,62,0,0,99,100,5,61,0,0,100,22,1,0,0,0,101,
  	102,5,60,0,0,102,24,1,0,0,0,103,104,5,60,0,0,104,105,5,61,0,0,105,26,
  	1,0,0,0,106,107,5,43,0,0,107,28,1,0,0,0,108,109,5,45,0,0,109,30,1,0,0,
  	0,110,111,5,42,0,0,111,32,1,0,0,0,112,113,5,47,0,0,113,34,1,0,0,0,114,
  	115,5,37,0,0,115,36,1,0,0,0,116,117,5,44,0,0,117,38,1,0,0,0,118,119,5,
  	59,0,0,119,40,1,0,0,0,120,121,5,61,0,0,121,42,1,0,0,0,122,123,5,34,0,
  	0,123,44,1,0,0,0,124,128,5,91,0,0,125,127,3,67,33,0,126,125,1,0,0,0,127,
  	130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,151,1,0,0,0,130,128,1,
  	0,0,0,131,148,3,57,28,0,132,134,3,67,33,0,133,132,1,0,0,0,134,137,1,0,
  	0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,138,1,0,0,0,137,135,1,0,0,0,138,
  	142,5,44,0,0,139,141,3,67,33,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,
  	1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,142,1,0,0,0,145,147,3,57,
  	28,0,146,135,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,
  	149,152,1,0,0,0,150,148,1,0,0,0,151,131,1,0,0,0,151,152,1,0,0,0,152,156,
  	1,0,0,0,153,155,3,67,33,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,
  	0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,93,0,0,
  	160,46,1,0,0,0,161,165,5,91,0,0,162,164,3,67,33,0,163,162,1,0,0,0,164,
  	167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,188,1,0,0,0,167,165,1,
  	0,0,0,168,185,3,53,26,0,169,171,3,67,33,0,170,169,1,0,0,0,171,174,1,0,
  	0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,
  	179,5,44,0,0,176,178,3,67,33,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,
  	1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,184,3,53,
  	26,0,183,172,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,
  	186,189,1,0,0,0,187,185,1,0,0,0,188,168,1,0,0,0,188,189,1,0,0,0,189,193,
  	1,0,0,0,190,192,3,67,33,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,
  	0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,93,0,0,
  	197,48,1,0,0,0,198,202,5,91,0,0,199,201,3,67,33,0,200,199,1,0,0,0,201,
  	204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,225,1,0,0,0,204,202,1,
  	0,0,0,205,222,3,55,27,0,206,208,3,67,33,0,207,206,1,0,0,0,208,211,1,0,
  	0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,
  	216,5,44,0,0,213,215,3,67,33,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,
  	1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,221,3,55,
  	27,0,220,209,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,
  	223,226,1,0,0,0,224,222,1,0,0,0,225,205,1,0,0,0,225,226,1,0,0,0,226,230,
  	1,0,0,0,227,229,3,67,33,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,
  	0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,5,93,0,0,
  	234,50,1,0,0,0,235,239,7,8,0,0,236,238,7,9,0,0,237,236,1,0,0,0,238,241,
  	1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,52,1,0,0,0,241,239,1,0,0,
  	0,242,251,5,48,0,0,243,247,7,10,0,0,244,246,7,11,0,0,245,244,1,0,0,0,
  	246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,251,1,0,0,0,249,247,
  	1,0,0,0,250,242,1,0,0,0,250,243,1,0,0,0,251,54,1,0,0,0,252,254,5,45,0,
  	0,253,252,1,0,0,0,253,254,1,0,0,0,254,279,1,0,0,0,255,257,7,11,0,0,256,
  	255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,
  	0,0,0,260,258,1,0,0,0,261,263,5,46,0,0,262,264,7,11,0,0,263,262,1,0,0,
  	0,264,265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,280,1,0,0,0,267,
  	269,7,11,0,0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,
  	1,0,0,0,271,272,1,0,0,0,272,276,5,46,0,0,273,275,7,11,0,0,274,273,1,0,
  	0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,280,1,0,0,0,278,
  	276,1,0,0,0,279,258,1,0,0,0,279,268,1,0,0,0,280,56,1,0,0,0,281,286,3,
  	43,21,0,282,285,3,59,29,0,283,285,3,65,32,0,284,282,1,0,0,0,284,283,1,
  	0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,
  	288,286,1,0,0,0,289,290,3,43,21,0,290,58,1,0,0,0,291,294,5,92,0,0,292,
  	295,7,12,0,0,293,295,3,61,30,0,294,292,1,0,0,0,294,293,1,0,0,0,295,60,
  	1,0,0,0,296,297,7,2,0,0,297,298,3,63,31,0,298,299,3,63,31,0,299,300,3,
  	63,31,0,300,301,3,63,31,0,301,62,1,0,0,0,302,303,7,13,0,0,303,64,1,0,
  	0,0,304,305,8,14,0,0,305,66,1,0,0,0,306,308,7,15,0,0,307,306,1,0,0,0,
  	308,309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,312,
  	6,33,0,0,312,68,1,0,0,0,32,0,128,135,142,148,151,156,165,172,179,185,
  	188,193,202,209,216,222,225,230,239,247,250,253,258,265,270,276,279,284,
  	286,294,309,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  minialexerLexerStaticData = std::move(staticData);
}

}

miniaLexer::miniaLexer(CharStream *input) : Lexer(input) {
  miniaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *minialexerLexerStaticData->atn, minialexerLexerStaticData->decisionToDFA, minialexerLexerStaticData->sharedContextCache);
}

miniaLexer::~miniaLexer() {
  delete _interpreter;
}

std::string miniaLexer::getGrammarFileName() const {
  return "minia.g4";
}

const std::vector<std::string>& miniaLexer::getRuleNames() const {
  return minialexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& miniaLexer::getChannelNames() const {
  return minialexerLexerStaticData->channelNames;
}

const std::vector<std::string>& miniaLexer::getModeNames() const {
  return minialexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& miniaLexer::getVocabulary() const {
  return minialexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView miniaLexer::getSerializedATN() const {
  return minialexerLexerStaticData->serializedATN;
}

const atn::ATN& miniaLexer::getATN() const {
  return *minialexerLexerStaticData->atn;
}




void miniaLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  minialexerLexerInitialize();
#else
  ::antlr4::internal::call_once(minialexerLexerOnceFlag, minialexerLexerInitialize);
#endif
}
